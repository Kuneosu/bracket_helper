// Mocks generated by Mockito 5.4.5 from annotations
// in bracket_helper/test/mock_dao/test_mock_app_database.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i10;

import 'package:bracket_helper/data/dao/group_dao.dart' as _i5;
import 'package:bracket_helper/data/dao/match_dao.dart' as _i6;
import 'package:bracket_helper/data/dao/player_dao.dart' as _i4;
import 'package:bracket_helper/data/dao/team_dao.dart' as _i7;
import 'package:bracket_helper/data/dao/tournament_dao.dart' as _i3;
import 'package:bracket_helper/data/database/app_database.dart' as _i2;
import 'package:drift/drift.dart' as _i8;
import 'package:drift/src/runtime/executor/stream_queries.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _Fake$TournamentsTable_0 extends _i1.SmartFake
    implements _i2.$TournamentsTable {
  _Fake$TournamentsTable_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _Fake$GroupsTable_1 extends _i1.SmartFake implements _i2.$GroupsTable {
  _Fake$GroupsTable_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _Fake$PlayersTable_2 extends _i1.SmartFake implements _i2.$PlayersTable {
  _Fake$PlayersTable_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _Fake$PlayerGroupsTable_3 extends _i1.SmartFake
    implements _i2.$PlayerGroupsTable {
  _Fake$PlayerGroupsTable_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _Fake$ParticipantsTable_4 extends _i1.SmartFake
    implements _i2.$ParticipantsTable {
  _Fake$ParticipantsTable_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _Fake$TeamsTable_5 extends _i1.SmartFake implements _i2.$TeamsTable {
  _Fake$TeamsTable_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _Fake$MatchesTable_6 extends _i1.SmartFake implements _i2.$MatchesTable {
  _Fake$MatchesTable_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTournamentDao_7 extends _i1.SmartFake implements _i3.TournamentDao {
  _FakeTournamentDao_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePlayerDao_8 extends _i1.SmartFake implements _i4.PlayerDao {
  _FakePlayerDao_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGroupDao_9 extends _i1.SmartFake implements _i5.GroupDao {
  _FakeGroupDao_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMatchDao_10 extends _i1.SmartFake implements _i6.MatchDao {
  _FakeMatchDao_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTeamDao_11 extends _i1.SmartFake implements _i7.TeamDao {
  _FakeTeamDao_11(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _Fake$AppDatabaseManager_12 extends _i1.SmartFake
    implements _i2.$AppDatabaseManager {
  _Fake$AppDatabaseManager_12(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGeneratedDatabase_13 extends _i1.SmartFake
    implements _i8.GeneratedDatabase {
  _FakeGeneratedDatabase_13(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDriftDatabaseOptions_14 extends _i1.SmartFake
    implements _i8.DriftDatabaseOptions {
  _FakeDriftDatabaseOptions_14(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMigrationStrategy_15 extends _i1.SmartFake
    implements _i8.MigrationStrategy {
  _FakeMigrationStrategy_15(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStreamQueryUpdateRules_16 extends _i1.SmartFake
    implements _i8.StreamQueryUpdateRules {
  _FakeStreamQueryUpdateRules_16(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDatabaseConnection_17 extends _i1.SmartFake
    implements _i8.DatabaseConnection {
  _FakeDatabaseConnection_17(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeQueryExecutor_18 extends _i1.SmartFake implements _i8.QueryExecutor {
  _FakeQueryExecutor_18(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStreamQueryStore_19 extends _i1.SmartFake
    implements _i9.StreamQueryStore {
  _FakeStreamQueryStore_19(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDatabaseConnectionUser_20 extends _i1.SmartFake
    implements _i8.DatabaseConnectionUser {
  _FakeDatabaseConnectionUser_20(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMigrator_21 extends _i1.SmartFake implements _i8.Migrator {
  _FakeMigrator_21(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFuture_22<T1> extends _i1.SmartFake implements _i10.Future<T1> {
  _FakeFuture_22(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeInsertStatement_23<T1 extends _i8.Table, D1> extends _i1.SmartFake
    implements _i8.InsertStatement<T1, D1> {
  _FakeInsertStatement_23(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUpdateStatement_24<T extends _i8.Table, D> extends _i1.SmartFake
    implements _i8.UpdateStatement<T, D> {
  _FakeUpdateStatement_24(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSimpleSelectStatement_25<T1 extends _i8.HasResultSet, D>
    extends _i1.SmartFake
    implements _i8.SimpleSelectStatement<T1, D> {
  _FakeSimpleSelectStatement_25(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeJoinedSelectStatement_26<FirstT extends _i8.HasResultSet, FirstD>
    extends _i1.SmartFake
    implements _i8.JoinedSelectStatement<FirstT, FirstD> {
  _FakeJoinedSelectStatement_26(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeBaseSelectStatement_27<Row> extends _i1.SmartFake
    implements _i8.BaseSelectStatement<Row> {
  _FakeBaseSelectStatement_27(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDeleteStatement_28<T1 extends _i8.Table, D1> extends _i1.SmartFake
    implements _i8.DeleteStatement<T1, D1> {
  _FakeDeleteStatement_28(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSelectable_29<T> extends _i1.SmartFake implements _i8.Selectable<T> {
  _FakeSelectable_29(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGenerationContext_30 extends _i1.SmartFake
    implements _i8.GenerationContext {
  _FakeGenerationContext_30(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AppDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppDatabase extends _i1.Mock implements _i2.AppDatabase {
  MockAppDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get schemaVersion =>
      (super.noSuchMethod(Invocation.getter(#schemaVersion), returnValue: 0)
          as int);

  @override
  _i2.$TournamentsTable get tournaments =>
      (super.noSuchMethod(
            Invocation.getter(#tournaments),
            returnValue: _Fake$TournamentsTable_0(
              this,
              Invocation.getter(#tournaments),
            ),
          )
          as _i2.$TournamentsTable);

  @override
  _i2.$GroupsTable get groups =>
      (super.noSuchMethod(
            Invocation.getter(#groups),
            returnValue: _Fake$GroupsTable_1(this, Invocation.getter(#groups)),
          )
          as _i2.$GroupsTable);

  @override
  _i2.$PlayersTable get players =>
      (super.noSuchMethod(
            Invocation.getter(#players),
            returnValue: _Fake$PlayersTable_2(
              this,
              Invocation.getter(#players),
            ),
          )
          as _i2.$PlayersTable);

  @override
  _i2.$PlayerGroupsTable get playerGroups =>
      (super.noSuchMethod(
            Invocation.getter(#playerGroups),
            returnValue: _Fake$PlayerGroupsTable_3(
              this,
              Invocation.getter(#playerGroups),
            ),
          )
          as _i2.$PlayerGroupsTable);

  @override
  _i2.$ParticipantsTable get participants =>
      (super.noSuchMethod(
            Invocation.getter(#participants),
            returnValue: _Fake$ParticipantsTable_4(
              this,
              Invocation.getter(#participants),
            ),
          )
          as _i2.$ParticipantsTable);

  @override
  _i2.$TeamsTable get teams =>
      (super.noSuchMethod(
            Invocation.getter(#teams),
            returnValue: _Fake$TeamsTable_5(this, Invocation.getter(#teams)),
          )
          as _i2.$TeamsTable);

  @override
  _i2.$MatchesTable get matches =>
      (super.noSuchMethod(
            Invocation.getter(#matches),
            returnValue: _Fake$MatchesTable_6(
              this,
              Invocation.getter(#matches),
            ),
          )
          as _i2.$MatchesTable);

  @override
  _i3.TournamentDao get tournamentDao =>
      (super.noSuchMethod(
            Invocation.getter(#tournamentDao),
            returnValue: _FakeTournamentDao_7(
              this,
              Invocation.getter(#tournamentDao),
            ),
          )
          as _i3.TournamentDao);

  @override
  _i4.PlayerDao get playerDao =>
      (super.noSuchMethod(
            Invocation.getter(#playerDao),
            returnValue: _FakePlayerDao_8(this, Invocation.getter(#playerDao)),
          )
          as _i4.PlayerDao);

  @override
  _i5.GroupDao get groupDao =>
      (super.noSuchMethod(
            Invocation.getter(#groupDao),
            returnValue: _FakeGroupDao_9(this, Invocation.getter(#groupDao)),
          )
          as _i5.GroupDao);

  @override
  _i6.MatchDao get matchDao =>
      (super.noSuchMethod(
            Invocation.getter(#matchDao),
            returnValue: _FakeMatchDao_10(this, Invocation.getter(#matchDao)),
          )
          as _i6.MatchDao);

  @override
  _i7.TeamDao get teamDao =>
      (super.noSuchMethod(
            Invocation.getter(#teamDao),
            returnValue: _FakeTeamDao_11(this, Invocation.getter(#teamDao)),
          )
          as _i7.TeamDao);

  @override
  _i2.$AppDatabaseManager get managers =>
      (super.noSuchMethod(
            Invocation.getter(#managers),
            returnValue: _Fake$AppDatabaseManager_12(
              this,
              Invocation.getter(#managers),
            ),
          )
          as _i2.$AppDatabaseManager);

  @override
  Iterable<_i8.TableInfo<_i8.Table, Object?>> get allTables =>
      (super.noSuchMethod(
            Invocation.getter(#allTables),
            returnValue: <_i8.TableInfo<_i8.Table, Object?>>[],
          )
          as Iterable<_i8.TableInfo<_i8.Table, Object?>>);

  @override
  List<_i8.DatabaseSchemaEntity> get allSchemaEntities =>
      (super.noSuchMethod(
            Invocation.getter(#allSchemaEntities),
            returnValue: <_i8.DatabaseSchemaEntity>[],
          )
          as List<_i8.DatabaseSchemaEntity>);

  @override
  _i8.GeneratedDatabase get attachedDatabase =>
      (super.noSuchMethod(
            Invocation.getter(#attachedDatabase),
            returnValue: _FakeGeneratedDatabase_13(
              this,
              Invocation.getter(#attachedDatabase),
            ),
          )
          as _i8.GeneratedDatabase);

  @override
  _i8.DriftDatabaseOptions get options =>
      (super.noSuchMethod(
            Invocation.getter(#options),
            returnValue: _FakeDriftDatabaseOptions_14(
              this,
              Invocation.getter(#options),
            ),
          )
          as _i8.DriftDatabaseOptions);

  @override
  _i8.MigrationStrategy get migration =>
      (super.noSuchMethod(
            Invocation.getter(#migration),
            returnValue: _FakeMigrationStrategy_15(
              this,
              Invocation.getter(#migration),
            ),
          )
          as _i8.MigrationStrategy);

  @override
  _i8.StreamQueryUpdateRules get streamUpdateRules =>
      (super.noSuchMethod(
            Invocation.getter(#streamUpdateRules),
            returnValue: _FakeStreamQueryUpdateRules_16(
              this,
              Invocation.getter(#streamUpdateRules),
            ),
          )
          as _i8.StreamQueryUpdateRules);

  @override
  _i8.DatabaseConnection get connection =>
      (super.noSuchMethod(
            Invocation.getter(#connection),
            returnValue: _FakeDatabaseConnection_17(
              this,
              Invocation.getter(#connection),
            ),
          )
          as _i8.DatabaseConnection);

  @override
  _i8.SqlTypes get typeMapping =>
      (super.noSuchMethod(
            Invocation.getter(#typeMapping),
            returnValue: _i11.dummyValue<_i8.SqlTypes>(
              this,
              Invocation.getter(#typeMapping),
            ),
          )
          as _i8.SqlTypes);

  @override
  _i8.QueryExecutor get executor =>
      (super.noSuchMethod(
            Invocation.getter(#executor),
            returnValue: _FakeQueryExecutor_18(
              this,
              Invocation.getter(#executor),
            ),
          )
          as _i8.QueryExecutor);

  @override
  _i9.StreamQueryStore get streamQueries =>
      (super.noSuchMethod(
            Invocation.getter(#streamQueries),
            returnValue: _FakeStreamQueryStore_19(
              this,
              Invocation.getter(#streamQueries),
            ),
          )
          as _i9.StreamQueryStore);

  @override
  _i8.DatabaseConnectionUser get resolvedEngine =>
      (super.noSuchMethod(
            Invocation.getter(#resolvedEngine),
            returnValue: _FakeDatabaseConnectionUser_20(
              this,
              Invocation.getter(#resolvedEngine),
            ),
          )
          as _i8.DatabaseConnectionUser);

  @override
  _i8.Migrator createMigrator() =>
      (super.noSuchMethod(
            Invocation.method(#createMigrator, []),
            returnValue: _FakeMigrator_21(
              this,
              Invocation.method(#createMigrator, []),
            ),
          )
          as _i8.Migrator);

  @override
  _i10.Future<void> beforeOpen(
    _i8.QueryExecutor? executor,
    _i8.OpeningDetails? details,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#beforeOpen, [executor, details]),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Stream<T> createStream<T extends Object>(
    _i9.QueryStreamFetcher<T>? stmt,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createStream, [stmt]),
            returnValue: _i10.Stream<T>.empty(),
          )
          as _i10.Stream<T>);

  @override
  T alias<T, D>(_i8.ResultSetImplementation<T, D>? table, String? alias) =>
      (super.noSuchMethod(
            Invocation.method(#alias, [table, alias]),
            returnValue: _i11.dummyValue<T>(
              this,
              Invocation.method(#alias, [table, alias]),
            ),
          )
          as T);

  @override
  void markTablesUpdated(Iterable<_i8.TableInfo<_i8.Table, dynamic>>? tables) =>
      super.noSuchMethod(
        Invocation.method(#markTablesUpdated, [tables]),
        returnValueForMissingStub: null,
      );

  @override
  void notifyUpdates(Set<_i8.TableUpdate>? updates) => super.noSuchMethod(
    Invocation.method(#notifyUpdates, [updates]),
    returnValueForMissingStub: null,
  );

  @override
  _i10.Stream<Set<_i8.TableUpdate>> tableUpdates([
    _i8.TableUpdateQuery? query = const _i8.TableUpdateQuery.any(),
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#tableUpdates, [query]),
            returnValue: _i10.Stream<Set<_i8.TableUpdate>>.empty(),
          )
          as _i10.Stream<Set<_i8.TableUpdate>>);

  @override
  _i10.Future<T> doWhenOpened<T>(
    _i10.FutureOr<T> Function(_i8.QueryExecutor)? fn,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#doWhenOpened, [fn]),
            returnValue:
                _i11.ifNotNull(
                  _i11.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#doWhenOpened, [fn]),
                  ),
                  (T v) => _i10.Future<T>.value(v),
                ) ??
                _FakeFuture_22<T>(this, Invocation.method(#doWhenOpened, [fn])),
          )
          as _i10.Future<T>);

  @override
  _i8.InsertStatement<T, D> into<T extends _i8.Table, D>(
    _i8.TableInfo<T, D>? table,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#into, [table]),
            returnValue: _FakeInsertStatement_23<T, D>(
              this,
              Invocation.method(#into, [table]),
            ),
          )
          as _i8.InsertStatement<T, D>);

  @override
  _i8.UpdateStatement<Tbl, R> update<Tbl extends _i8.Table, R>(
    _i8.TableInfo<Tbl, R>? table,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#update, [table]),
            returnValue: _FakeUpdateStatement_24<Tbl, R>(
              this,
              Invocation.method(#update, [table]),
            ),
          )
          as _i8.UpdateStatement<Tbl, R>);

  @override
  _i8.SimpleSelectStatement<T, R> select<T extends _i8.HasResultSet, R>(
    _i8.ResultSetImplementation<T, R>? table, {
    bool? distinct = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#select, [table], {#distinct: distinct}),
            returnValue: _FakeSimpleSelectStatement_25<T, R>(
              this,
              Invocation.method(#select, [table], {#distinct: distinct}),
            ),
          )
          as _i8.SimpleSelectStatement<T, R>);

  @override
  _i8.JoinedSelectStatement<T, R> selectOnly<T extends _i8.HasResultSet, R>(
    _i8.ResultSetImplementation<T, R>? table, {
    bool? distinct = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#selectOnly, [table], {#distinct: distinct}),
            returnValue: _FakeJoinedSelectStatement_26<T, R>(
              this,
              Invocation.method(#selectOnly, [table], {#distinct: distinct}),
            ),
          )
          as _i8.JoinedSelectStatement<T, R>);

  @override
  _i8.BaseSelectStatement<_i8.TypedResult> selectExpressions(
    Iterable<_i8.Expression<Object>>? columns,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#selectExpressions, [columns]),
            returnValue: _FakeBaseSelectStatement_27<_i8.TypedResult>(
              this,
              Invocation.method(#selectExpressions, [columns]),
            ),
          )
          as _i8.BaseSelectStatement<_i8.TypedResult>);

  @override
  _i8.DeleteStatement<T, D> delete<T extends _i8.Table, D>(
    _i8.TableInfo<T, D>? table,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [table]),
            returnValue: _FakeDeleteStatement_28<T, D>(
              this,
              Invocation.method(#delete, [table]),
            ),
          )
          as _i8.DeleteStatement<T, D>);

  @override
  _i10.Future<int> customUpdate(
    String? query, {
    List<_i8.Variable<Object>>? variables = const [],
    Set<_i8.ResultSetImplementation<dynamic, dynamic>>? updates,
    _i8.UpdateKind? updateKind,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #customUpdate,
              [query],
              {
                #variables: variables,
                #updates: updates,
                #updateKind: updateKind,
              },
            ),
            returnValue: _i10.Future<int>.value(0),
          )
          as _i10.Future<int>);

  @override
  _i10.Future<int> customInsert(
    String? query, {
    List<_i8.Variable<Object>>? variables = const [],
    Set<_i8.ResultSetImplementation<dynamic, dynamic>>? updates,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #customInsert,
              [query],
              {#variables: variables, #updates: updates},
            ),
            returnValue: _i10.Future<int>.value(0),
          )
          as _i10.Future<int>);

  @override
  _i10.Future<List<_i8.QueryRow>> customWriteReturning(
    String? query, {
    List<_i8.Variable<Object>>? variables = const [],
    Set<_i8.ResultSetImplementation<dynamic, dynamic>>? updates,
    _i8.UpdateKind? updateKind,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #customWriteReturning,
              [query],
              {
                #variables: variables,
                #updates: updates,
                #updateKind: updateKind,
              },
            ),
            returnValue: _i10.Future<List<_i8.QueryRow>>.value(
              <_i8.QueryRow>[],
            ),
          )
          as _i10.Future<List<_i8.QueryRow>>);

  @override
  _i8.Selectable<_i8.QueryRow> customSelect(
    String? query, {
    List<_i8.Variable<Object>>? variables = const [],
    Set<_i8.ResultSetImplementation<dynamic, dynamic>>? readsFrom = const {},
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #customSelect,
              [query],
              {#variables: variables, #readsFrom: readsFrom},
            ),
            returnValue: _FakeSelectable_29<_i8.QueryRow>(
              this,
              Invocation.method(
                #customSelect,
                [query],
                {#variables: variables, #readsFrom: readsFrom},
              ),
            ),
          )
          as _i8.Selectable<_i8.QueryRow>);

  @override
  _i8.Selectable<_i8.QueryRow> customSelectQuery(
    String? query, {
    List<_i8.Variable<Object>>? variables = const [],
    Set<_i8.ResultSetImplementation<dynamic, dynamic>>? readsFrom = const {},
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #customSelectQuery,
              [query],
              {#variables: variables, #readsFrom: readsFrom},
            ),
            returnValue: _FakeSelectable_29<_i8.QueryRow>(
              this,
              Invocation.method(
                #customSelectQuery,
                [query],
                {#variables: variables, #readsFrom: readsFrom},
              ),
            ),
          )
          as _i8.Selectable<_i8.QueryRow>);

  @override
  _i10.Future<void> customStatement(String? statement, [List<dynamic>? args]) =>
      (super.noSuchMethod(
            Invocation.method(#customStatement, [statement, args]),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<T> transaction<T>(
    _i10.Future<T> Function()? action, {
    bool? requireNew = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #transaction,
              [action],
              {#requireNew: requireNew},
            ),
            returnValue:
                _i11.ifNotNull(
                  _i11.dummyValueOrNull<T>(
                    this,
                    Invocation.method(
                      #transaction,
                      [action],
                      {#requireNew: requireNew},
                    ),
                  ),
                  (T v) => _i10.Future<T>.value(v),
                ) ??
                _FakeFuture_22<T>(
                  this,
                  Invocation.method(
                    #transaction,
                    [action],
                    {#requireNew: requireNew},
                  ),
                ),
          )
          as _i10.Future<T>);

  @override
  _i10.Future<T> exclusively<T>(_i10.Future<T> Function()? action) =>
      (super.noSuchMethod(
            Invocation.method(#exclusively, [action]),
            returnValue:
                _i11.ifNotNull(
                  _i11.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#exclusively, [action]),
                  ),
                  (T v) => _i10.Future<T>.value(v),
                ) ??
                _FakeFuture_22<T>(
                  this,
                  Invocation.method(#exclusively, [action]),
                ),
          )
          as _i10.Future<T>);

  @override
  _i10.Future<void> batch(
    _i10.FutureOr<void> Function(_i8.Batch)? runInBatch,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#batch, [runInBatch]),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<T> runWithInterceptor<T>(
    _i10.Future<T> Function()? action, {
    required _i8.QueryInterceptor? interceptor,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #runWithInterceptor,
              [action],
              {#interceptor: interceptor},
            ),
            returnValue:
                _i11.ifNotNull(
                  _i11.dummyValueOrNull<T>(
                    this,
                    Invocation.method(
                      #runWithInterceptor,
                      [action],
                      {#interceptor: interceptor},
                    ),
                  ),
                  (T v) => _i10.Future<T>.value(v),
                ) ??
                _FakeFuture_22<T>(
                  this,
                  Invocation.method(
                    #runWithInterceptor,
                    [action],
                    {#interceptor: interceptor},
                  ),
                ),
          )
          as _i10.Future<T>);

  @override
  _i8.GenerationContext $write(
    _i8.Component? component, {
    bool? hasMultipleTables,
    int? startIndex,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #$write,
              [component],
              {#hasMultipleTables: hasMultipleTables, #startIndex: startIndex},
            ),
            returnValue: _FakeGenerationContext_30(
              this,
              Invocation.method(
                #$write,
                [component],
                {
                  #hasMultipleTables: hasMultipleTables,
                  #startIndex: startIndex,
                },
              ),
            ),
          )
          as _i8.GenerationContext);

  @override
  _i8.GenerationContext $writeInsertable(
    _i8.TableInfo<_i8.Table, dynamic>? table,
    _i8.Insertable<dynamic>? insertable, {
    int? startIndex,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #$writeInsertable,
              [table, insertable],
              {#startIndex: startIndex},
            ),
            returnValue: _FakeGenerationContext_30(
              this,
              Invocation.method(
                #$writeInsertable,
                [table, insertable],
                {#startIndex: startIndex},
              ),
            ),
          )
          as _i8.GenerationContext);

  @override
  String $expandVar(int? start, int? amount) =>
      (super.noSuchMethod(
            Invocation.method(#$expandVar, [start, amount]),
            returnValue: _i11.dummyValue<String>(
              this,
              Invocation.method(#$expandVar, [start, amount]),
            ),
          )
          as String);
}
